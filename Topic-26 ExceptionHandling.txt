EXCEPTION HANDLING:
===================
What is an Exception ?
		- runtime error / execution error

What is an Exception handling?
		- to avoid abnormal terimination of 
a program execution.

- pl/sql supports the following two types of exceptions
				1. pre-defined exceptions
				2. user-defined exceptions
	  
1. pre-defined exceptions:
==========================
		> no_data_found
		> too_many_rows
		> zero-divide
		> invalid_cursor
		> cursor_already_open.....etc

no_data_found:
==============
	- if our required data is not found in a table then oracle
returns an exception is called as "no data found".

Ex:
SQL> DECLARE
  2  v_ENAME VARCHAR2(10);
  3  BEGIN
  4  SELECT ENAME INTO v_ENAME FROM EMP WHERE EMPNO=&EMPNO;
  5  DBMS_OUTPUT.PUT_LINE(v_ENAME);
  6  END;
  7  /
Enter value for empno: 7788
SCOTT

SQL> /
Enter value for empno: 1122
ERROR at line 1:
ORA-01403: no data found
ORA-06512: at line 4
	- to overcome the above exception then we use a predefined
exception name is "no_data_found" like below,

solution:
=========
DECLARE
v_ENAME VARCHAR2(10);
BEGIN
SELECT ENAME INTO v_ENAME FROM EMP WHERE EMPNO=&EMPNO;
DBMS_OUTPUT.PUT_LINE(v_ENAME);
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('ROW IS NOT EXISTS IN A TABLE');
END;
/

Enter value for empno: 7900
JAMES
PL/SQL procedure successfully completed.

SQL> /
Enter value for empno: 1122
ROW NOT EXISTS IN A TABLE
PL/SQL procedure successfully completed.
				
too_many_rows:
==============
	- when we retrieving more than one row data from a table 
by using "select.....into" statement then oracle return an
exception is called as "exact fetch returns more than 
requested number of rows".				

Ex:
SQL> SELECT * FROM TEST;

ENAME             SAL
---------- ----------
A               15000
B               25000

SQL> DECLARE
    v_SAL NUMBER(10);
    BEGIN
    SELECT SAL INTO v_SAL FROM TEST;
    DBMS_OUTPUT.PUT_LINE(v_SAL);
    END;
    /
ERROR at line 1:
ORA-01422: exact fetch returns more than requested number of rows
ORA-06512: at line 4

	- to overcome the above exception then we use a pre-defined
exception name is "too_many_rows".

solution:
=========
DECLARE
    v_SAL NUMBER(10);
    BEGIN
    SELECT SAL INTO v_SAL FROM TEST;
    DBMS_OUTPUT.PUT_LINE(v_SAL);
	 EXCEPTION
	 WHEN TOO_MANY_ROWS THEN
	 DBMS_OUTPUT.PUT_LINE('A TABLE IS HAVING MORE THAN ONE ROW');
	 END;
	 /
A TABLE IS HAVING MORE THAN ONE ROW
PL/SQL procedure successfully completed.

zero_divide:
============
	- when we perform a division with zero then oracle return
an exception is called as "divisor is equal to zero".

Ex:
SQL> DECLARE
  2  X NUMBER(10);
  3  Y NUMBER(10);
  4  Z NUMBER(10);
  5  BEGIN
  6  X:=&X;
  7  Y:=&Y;
  8  Z:=X/Y;
  9  DBMS_OUTPUT.PUT_LINE(Z);
 10  END;
 11  /
Enter value for x: 10
Enter value for y: 2
5
PL/SQL procedure successfully completed.

SQL> /
Enter value for x: 10
Enter value for y: 0

ERROR at line 1:
ORA-01476: divisor is equal to zero
ORA-06512: at line 8
	- to overcome the above an exception then we use oracle 
pre-defined exception name is "zero_divide".

solution:
=========
DECLARE
    X NUMBER(10);
    Y NUMBER(10);
    Z NUMBER(10);
    BEGIN
    X:=&X;
    Y:=&Y;
    Z:=X/Y;
    DBMS_OUTPUT.PUT_LINE(Z);
	 EXCEPTION
	 WHEN ZERO_DIVIDE THEN
	 DBMS_OUTPUT.PUT_LINE('SECOND NUMBER SHOULD NOT BE ZERO');
    END;

Enter value for x: 10
Enter value for y: 5
2
PL/SQL procedure successfully completed.

SQL> /
Enter value for x: 10
Enter value for y: 0
SECOND NUMBER SHOULD NOT BE ZERO
PL/SQL procedure successfully completed.

SQLCODE & SQLERRM:
==================
	- these are pre-defined properties which are used to handling
any type of exception which was raised in a pl/sql block.
	- when we use these two properties then we must use "others"
exception name.

	- Here,
			SQLCODE : is return exception number.
			SQLERRM : is return exception message.

Ex:
DECLARE
    X NUMBER(10);
    Y NUMBER(10);
    Z NUMBER(10);
    BEGIN
    X:=&X;
    Y:=&Y;
    Z:=X/Y;
    DBMS_OUTPUT.PUT_LINE(Z);
	 EXCEPTION
	 WHEN OTHERS THEN
	 DBMS_OUTPUT.PUT_LINE(SQLCODE);
	 DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END;

Enter value for x: 10
Enter value for y: 5
2
PL/SQL procedure successfully completed.

SQL> /
Enter value for x: 10
Enter value for y: 0

-1476
ORA-01476: divisor is equal to zero
PL/SQL procedure successfully completed.

2) USER DEFINED EXCEPTIONS:
===========================
	- these exceptions are created by user to raise and handling
exceptions in a pl/sql block.
	- when we create our own exception names then we follow
the following 3 steps;

step1: declare user defined exception name:
===========================================
syntax:
=======
	<UD exception name> exception;

step2: to raise a UD exception name:
====================================
method1:
========
syntax:
=======
	raise <UD defined exception name>;

method2:
========
syntax:
=======
	raise_application_error(number,message);

	- "raise" statement can raise and also handling an exception
whereas "raise_application_error()" can raise an exception but
not handling exception.

step3: Handling exceptions with UD exception name:
==================================================
syntax:
=======
	exception
	when <UD exception name> then
	<handling exception statement>;
	end;
	/

EX:
SQL> DECLARE
  2  X NUMBER(10);
  3  Y NUMBER(10);
  4  Z NUMBER(10);
  5  EX EXCEPTION;
  6  BEGIN
  7  X:=&X;
  8  Y:=&Y;
  9  IF Y=0 THEN
 10  RAISE EX;
 11  ELSE
 12  Z:=X/Y;
 13  DBMS_OUTPUT.PUT_LINE(Z);
 14  END IF;
 15  EXCEPTION
 16  WHEN EX THEN
 17  DBMS_OUTPUT.PUT_LINE('SECOND NUMBER NOT BE ZERO');
 18  END;
 19  /
Enter value for x: 10
Enter value for y: 5
2
PL/SQL procedure successfully completed.

SQL> /
Enter value for x: 10
Enter value for y: 0
SECOND NUMBER NOT BE ZERO
PL/SQL procedure successfully completed.

raise_application_error(number,message):
========================================
	- it is a pre-defined method which is used to raise 
an exception but not handl exception in pl/sql block.
	- it can raise an exception in oracle server format.
	- it is having two arguments are:

	number : it return an exception user defined number.
				it should be -20001 to -20999

	message : it return user defined error message.

SQL> DECLARE
    X NUMBER(10);
    Y NUMBER(10);
    Z NUMBER(10);
    EX EXCEPTION;
    BEGIN
    X:=&X;
    Y:=&Y;
    IF Y=0 THEN
   RAISE EX;
   ELSE
   Z:=X/Y;
   DBMS_OUTPUT.PUT_LINE(Z);
   END IF;
   EXCEPTION
   WHEN EX THEN
   RAISE_APPLICATION_ERROR(-20478,'SECOND NUMBER NOT BE ZERO');
   END;
   /

Enter value for x: 10
Enter value for y: 5
2
PL/SQL procedure successfully completed.

SQL> /
Enter value for x: 10
Enter value for y: 0

ERROR at line 1:
ORA-20478: SECOND NUMBER NOT BE ZERO
ORA-06512: at line 17

EXCEPTION PROPAGATION:
======================
	- generally exceptions are raised in execution block and those
exceptions are handling with pre-defined exeption name / user
defined exception name by default.
	- but when an exception is raised in declaration block 
then we use an exception propagation mechanism to handle exceptions
which raised in declaration block.
	- when we use exception propagation then we implement
nested pl/sql block.

Ex:
SQL> DECLARE
  2  X VARCHAR2(3):='KING';
  3  BEGIN
  4  DBMS_OUTPUT.PUT_LINE(X);
  5  EXCEPTION
  6  WHEN VALUE_ERROR THEN
  7  DBMS_OUTPUT.PUT_LINE('INVALID STRING LENGTH');
  8  END;
  9  /
ERROR at line 1:
ORA-06502: PL/SQL: numeric or value error: character string buffer too small
ORA-06512: at line 2

	- to handle the above an exception then we use a mechanism
is called as "exception propagation".

solution:
=========
	 BEGIN
    DECLARE
    X VARCHAR2(3):='KING';
    BEGIN
    DBMS_OUTPUT.PUT_LINE(X);
    EXCEPTION
    WHEN VALUE_ERROR THEN
    DBMS_OUTPUT.PUT_LINE('INNER BLOCK CAN HANDLED');
    END;
	 EXCEPTION
    WHEN VALUE_ERROR THEN
    DBMS_OUTPUT.PUT_LINE('OUTER BLOCK CAN HANDLED');
    END;
    /
OUTER BLOCK CAN HANDLED
PL/SQL procedure successfully completed.

NOTE:
====
	- in exception propagation mechanism declaration block
exceptions are handling by outer block only.




















					
				