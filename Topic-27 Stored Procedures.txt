SUBBLOCKS:
==========
	- it is a named block.which can store code which 
we written under subblock.
	- there four types of subblock objects are;
				1. stored procedure
				2. stored function
				3. package
				4. trigger

1. stored procedure:
====================
	- it is named block which can accept some input
values from the user,to perform some operation
and it may be (or) may not be return a value.
	- if we pass "out" parameters to a stored procedure
then it return a value other procedures are never
return a value.

syntax:
=======
create [or replace] procedure <pname>(<parameters name> [mode type] <datatype>,.....)
is / as
<declare variables>;
begin
<procedure body / statements>;
end;
/

How to call a stored procedure:
===============================
syntax1:
=========
execute <pname>(value/(s));
		(or)
exec <pname>(value / (s));

syntax2: (calling a SP with annonymous block)
===========================================
begin
<pname> (value/(s));
end;
/

Types of parameters modes:
==========================
	- In pl/sql stored procedure is supporting the 
following 3 types of parameters modes.
			i) IN
			ii) OUT
			iii) IN OUT

i) IN:
======
	-these default parameters of a SP.
	-to store input values which was given by user
at the time execution of a SP.

ii) OUT:
========
	- Generally stored procedures are never return a
value if SP want to return a value then we use
"out" parameters.

iii) IN OUT:
============
	- this parameter can accept and also return a value.


Examples of "IN" parameters:
=============================
create a SP to accept empno as a "in" parameter and 
display that employee ename and salary details from
emp table?
SQL> CREATE OR REPLACE PROCEDURE SP1(p_EMPNO IN NUMBER)
  2  IS
  3  v_ENAME VARCHAR2(10);
  4  v_SAL NUMBER(10);
  5  BEGIN
  6  SELECT ENAME,SAL INTO v_ENAME,v_SAL FROM EMP
  7  WHERE EMPNO=p_EMPNO;
  8  DBMS_OUTPUT.PUT_LINE(v_ENAME||','||v_SAL);
  9  END;
 10  /
Procedure created.

SYNTAX1:
SQL> EXECUTE SP1(7788);
SCOTT,3000
		(OR)
SQL> EXEC SP1(7369);
SMITH,800

SYNTAX2:
SQL> BEGIN
  2  SP1(7566);
  3  END;
  4  /
JONES,2975

NOTE:
====
	- if we want to view subblock objects(SP/SF/package/tigger)
in oracle db then we use a datadictionary is called as
"user_objects".

EX:
SQL> DESC USER_OBJECTS;
SQL> SELECT OBJECT_NAME FROM USER_OBJECTS WHERE OBJECT_TYPE='PROCEDURE';


NOTE:
=====
	- if we want to view the source code of a particular 
subblock object(SP/SF/package/tigger) then we use a datadictionary
is called as "user_source".

EX:
SQL> DESC USER_SOURCE;
SQL> SELECT TEXT FROM USER_SOURCE WHERE NAME='SP1';

EX.ON "OUT" PARAMETERS:
=======================
EX1:
SQL> CREATE OR REPLACE PROCEDURE SP2(X IN NUMBER,Y OUT NUMBER)
  2  AS
  3  BEGIN
  4  Y:=X*X;
  5  END;
  6  /
Procedure created.

OUTPUT:
SQL> EXECUTE SP2(5);

ERROR at line 1:
ORA-06550: line 1, column 7:
PLS-00306: wrong number or types of arguments in call to 'SP2'

	- to overcome the above problem we need to follow the 
following three steps are;

step1: declare binding variable(referenced variable) 
for "out" parameters:
=======================
syntax:
=======
var[iable] <bind variable name> <datatype>[size];

step2: adding bind variables to a stored procedure:
===================================================
syntax:
=======
execute <pname>(value1,value2,....,:<bind variable name1>,...);

step3: print bind variables:
============================
syntax:
=======
	print <bind variable name>;


OUTPUT:
SQL> VAR A NUMBER;
SQL> EXECUTE SP2(5,:A);
PL/SQL procedure successfully completed.

SQL> PRINT A;

         A
----------
        25

EX:
create a SP to input empno as a "IN" parameter and return that
employee provident fund and professional tax at 10%,5% on
basic salary by using "OUT" parameters?
SQL> CREATE OR REPLACE PROCEDURE SP3(p_EMPNO IN NUMBER,PF OUT NUMBER,PT OUT NUMBER)
  2  IS
  3  v_BSAL NUMBER(10);
  4  BEGIN
  5  SELECT SAL INTO v_BSAL FROM EMP WHERE EMPNO=p_EMPNO;
  6  PF:=v_BSAL*0.1;
  7  PT:=v_BSAL*0.05;
  8  END;
  9  /

Procedure created.

SQL> VAR bPF NUMBER;
SQL> VAR bPT NUMBER;
SQL> EXECUTE SP3(7788,:bPF,:bPT);

PL/SQL procedure successfully completed.

SQL> PRINT bPF  bPT;

       BPF
----------
       300


       BPT
----------
       150

EX.ON "IN OUT":
===============
EX:
SQL> CREATE OR REPLACE PROCEDURE SP4(X IN OUT NUMBER)
  2  IS
  3  BEGIN
  4  X:=X*X*X;
  5  END;
  6  /

Procedure created.

SQL> EXECUTE SP4(5);
ERROR at line 1:
ORA-06550: line 1, column 11:
PLS-00363: expression '5' cannot be used as an assignment 
target.

	- to overcome the above problem we should follow the 
following four steps are;

step1: declare binding variable(referenced variable): 
====================================================
syntax:
=======
var[iable] <bind variable name> <datatype>[size];

step2: to assign a value to a bind varibale:
============================================
syntax:
=======
	execute :<bind variable name> := <value>;

step3: adding bind variables to a stored procedure:
===================================================
syntax:
=======
execute <pname>(:<bind variable name1>);

step4: print bind variables:
============================
syntax:
=======
	print <bind variable name>;

OUTPUT:
=======
SQL> VAR A NUMBER;
SQL> EXECUTE :A:=5;

PL/SQL procedure successfully completed.

SQL> EXECUTE SP4(:A);

PL/SQL procedure successfully completed.

SQL> PRINT A;

         A
----------
       125

SYNTAX TO DROP A STORED PROCEDURE:
==================================
DROP PROCEDURE <PNAME>;

EX:
DROP PROCEDURE SP1;



















































		
		


















