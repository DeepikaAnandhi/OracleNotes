JOINS:
======
	- joins are used to retrieving the required data from
multiple tables.
	- join statements can be written in two ways,
				1. Non-ansi joins(oracle8i version)
						> equi join
						> non-equi join
						> self join
				2. Ansi joins(oracle9i version)
						> inner join
						> outer joins
								> left outer join
								> right outer join
								> full outer join
						> cross join
						> natural join

			non-ansi joins								ansi joins
			===============								===========
1. not a portability								1. portability

2. to join tables based 						2. to join tables with
on "where clause" condition.				"on clause" condition.

syntax for non-ansi joins:
==========================
select * from <tn1>,<tn2> where <joining condition>;

syntax for ansi joins:
======================
select * from <tn1> <join key> <tn2> on <joining condition>;

equi join / inner join:
=======================
	- retrieving data from multiple tables based on an "="
operator.
	- we should have a common column in both tables and those 
columns datatypes must match.
	- having relationship between tables are optional.
	- is always retrieval matching rows from tables.

syntax:
=======
 where <tn1>.<common column name> = <tn2>.<common column name>
							         (or)
 on <tn1>.<common column name> = <tn2>.<common column name>

Ex:
SQL> SELECT * FROM COURSE;

       CID CNAME            CFEE
---------- ---------- ----------
         1 JAVA             5000
         2 ORACLE           2000
         3 .NET             4500

SQL> SELECT * FROM STUDENT;

      STID SNAME             CID
---------- ---------- ----------
       101 SMITH               1
       102 ALLEN               2
       103 JAMES               2
       104 WARD							 NULL

waq to retrieving student along with the corresponding course
details from tables by equi join?

NON-ANSI:
SQL> SELECT * FROM STUDENT,COURSE WHERE STUDENT.CID=COURSE.CID;
											(OR)
SQL> SELECT * FROM STUDENT S,COURSE C WHERE S.CID=C.CID;
											(OR)
SQL> SELECT SNAME,CNAME FROM STUDENT S,COURSE C WHERE S.CID=C.CID;
					
ANSI:
SQL> SELECT * FROM STUDENT INNER JOIN COURSE ON STUDENT.CID=COURSE.CID;
											(OR)
SQL> SELECT * FROM STUDENT S INNER JOIN COURSE C ON S.CID=C.CID;
											(OR)
SQL> SELECT SNAME,CNAME FROM STUDENT S INNER JOIN COURSE C ON S.CID=C.CID;

RULE OF JOINS:
==============
a row in a table is comparing with all rows of the another table.

EX:
waq to retrive students who are selected "oracle" course from 
student,course tables by using equi join?

ANSI:
SQL> SELECT * FROM STUDENT INNER JOIN COURSE ON STUDENT.CID=COURSE.CID
  2  AND CNAME='ORACLE';

NON-ANSI:
SQL> SELECT * FROM STUDENT,COURSE WHERE  STUDENT.CID=COURSE.CID
  2  AND CNAME='ORACLE';

EX:
waq to display employees who are working in chicago from emp,dept
tables by using equi join?

ANSI:
SQL> SELECT * FROM EMP E INNER JOIN DEPT D ON E.DEPTNO=D.DEPTNO
  2  AND LOC='CHICAGO';

NON-ANSI:
SQL> SELECT * FROM EMP E , DEPT D WHERE E.DEPTNO=D.DEPTNO
  2  AND LOC='CHICAGO';

EX:
waq to display sum of salaries of each department from emp,dept
tables by using equi join?

ANSI:
SQL> SELECT DNAME,SUM(SAL) FROM EMP E INNER JOIN DEPT D ON E.DEPTNO=D.DEPTNO
  2  GROUP BY DNAME;

NON-ANSI
SQL> SELECT DNAME,SUM(SAL) FROM EMP E,DEPT D WHERE E.DEPTNO=D.DEPTNO
  2  GROUP BY DNAME;

EX:
waq to display departments in which department sum of salary is more
then 10000 from emp,dept table by using equi join?

ANSI:
SQL> SELECT DNAME,SUM(SAL) FROM EMP E INNER JOIN DEPT D ON E.DEPTNO=D.DEPTNO
  2  GROUP BY DNAME HAVING SUM(SAL)>10000;

NON-ANSI:
SQL> SELECT DNAME,SUM(SAL) FROM EMP E,DEPT D WHERE E.DEPTNO=D.DEPTNO
  2  GROUP BY DNAME HAVING SUM(SAL)>10000;

OUTER JOINS:
=============
	I) LEFT OUTER JOIN
	II) RIGHT OUTER JOIN
	III) FULL OUTER JOIN

I) LEFT OUTER JOIN:
===================
	- retrieving matching rows from both tables and unmatching 
rows from left side table only.

ANSI:
=====
SQL> SELECT * FROM STUDENT S LEFT OUTER JOIN COURSE C
  2  ON S.CID=C.CID;

NON-ANSI:
=========
	- when we implement outer joins in non-ansi format
then we should use a join operator is called as "(+)".

SQL> SELECT * FROM STUDENT S,COURSE C WHERE S.CID=C.CID(+);

II) RIGHT OUTER JOIN:
===================
	- retrieving matching rows from both tables and unmatching 
rows from right side table only.

ANSI:
=====
SQL> SELECT * FROM STUDENT S RIGHT OUTER JOIN COURSE C
     ON S.CID=C.CID;

NON-ANSI:
=========
SQL> SELECT * FROM STUDENT S,COURSE C WHERE S.CID(+)=C.CID;

III) FULL OUTER JOIN:
=====================
	- retrieving matching and also unmatching rows from both
tables.
	- it is combination of left outer and right outer.

ANSI:
=====
SQL> SELECT * FROM STUDENT S FULL OUTER JOIN COURSE C
  2  ON S.CID=C.CID;

NON-ANSI:
=========
SQL> SELECT * FROM STUDENT S,COURSE C WHERE S.CID=C.CID(+)
  2  UNION
  3  SELECT * FROM STUDENT S,COURSE C WHERE S.CID(+)=C.CID;

NON-EQUI JOIN:
==============
	- retrieving data from multiple tables based on any 
operator except an "=" operator.
	- we can use the following operators are:
	 <,>,<=,>=,!=,between,and,....etc

EX:
SQL> SELECT * FROM TEST1;

       SNO NAME
---------- ----------
         1 SMITH
         2 MILLER

SQL> SELECT * FROM TEST2;

       SNO        SAL
---------- ----------
         1      25000
         3      15000

EX:
ANSI:
SQL> SELECT * FROM TEST1 T1 JOIN TEST2 T2
  2  ON T1.SNO>T2.SNO;

NON-ANSI:
SQL> SELECT * FROM TEST1 T1,TEST2 T2 WHERE T1.SNO>T2.SNO;

EX:
waq to display employees who salary is between low salary and 
high salary?

ANSI:
SQL> SELECT ENAME,SAL,LOSAL,HISAL FROM EMP JOIN SALGRADE
  2  ON SAL BETWEEN LOSAL AND HISAL;
					(OR)
SQL> SELECT ENAME,SAL,LOSAL,HISAL FROM EMP JOIN SALGRADE
  2  ON (SAL>=LOSAL) AND (SAL<=HISAL);

NON-ANSI:
SQL> SELECT ENAME,SAL,LOSAL,HISAL FROM EMP,SALGRADE
  2  WHERE SAL BETWEEN LOSAL AND HISAL;
						(OR)
SQL> SELECT ENAME,SAL,LOSAL,HISAL FROM EMP,SALGRADE
  2  WHERE (SAL>=LOSAL) AND (SAL<=HISAL);

CROSS JOIN:
===========
	-joining two or more than two tables without any condition.
	- a row in a table is comparing with all rows of the second
table.for example a table is having (m) no.of rows and another
table is having (n) no.of rows then the result is mxn rows.

Ex:
non-ansi:
=========
SQL> SELECT * FROM STUDENT,COURSE;

ansi:
=====
SQL> SELECT * FROM STUDENT CROSS JOIN COURSE;

Ex:
SQL> SELECT * FROM ITEMS1;

       SNO INAME           PRICE
---------- ---------- ----------
         1 PIZZA             160
         2 BURGER             80

SQL> SELECT * FROM ITEMS2;

       SNO INAME           PRICE
---------- ---------- ----------
       101 COCACOLA           25
       102 PEPSI              20

ANSI:
SQL> SELECT I1.INAME,I1.PRICE,I2.INAME,I2.PRICE,
  2  I1.PRICE+I2.PRICE TOTAL_AMOUNT FROM
  3  ITEMS1 I1 CROSS JOIN ITEMS2 I2;

						(OR)
NON-ANSI:
SQL> SELECT I1.INAME,I1.PRICE,I2.INAME,I2.PRICE,
  2  I1.PRICE+I2.PRICE TOTAL_AMOUNT FROM
  3  ITEMS1 I1,ITEMS2 I2;


INAME           PRICE INAME           PRICE TOTAL_AMOUNT
---------- ---------- ---------- ---------- ------------
PIZZA             160 COCACOLA           25          185

NATURAL JOIN:
=============
	- it is similar to equi join but avoiding duplicate columns
from the result set.
	- when we use natural join there is no need to write a 
join condition by explicitly(user) because internall oracle
db server will preparing a join condition based on common 
column along with "=" operator.
	- when we use natural join on tables then we should have 
a common column name in both tables it is mandatory.

ansi:
SQL> SELECT * FROM STUDENT S NATURAL JOIN COURSE C;

non-ansi:
SQL> SELECT c.cid,stid,sname,cname,cfee FROM STUDENT S,
COURSE C WHERE S.CID=C.CID;

SELF JOIN:
==========
	- joining a table by itself is called as "self join".
							(or)
	- comparing a table data by itself is called as "self join".
	- it can perform on a single table only.
	- self join can be implemented with the help of "alias names"
without alias names we cannot implement self join mechanism.
	- we can create any no.of alias names on a single table
but each alias name should be different.

EX:
waq to display manager and their employees from emp table?
SQL> SELECT M.ENAME MANAGERS,E.ENAME EMPLOYEES
    FROM EMP E,EMP M WHERE M.EMPNO=E.MGR;

MANAGERS   EMPLOYEES
---------- ----------
JONES      SCOTT 
JONES      FORD

EX:
waq to display employees who are joined before their manager?
SQL> SELECT E.ENAME EMPLOYEE,E.HIREDATE E_DOJ,
  2  M.ENAME MANAGER,M.HIREDATE M_DOJ FROM
  3  EMP E,EMP M WHERE M.EMPNO=E.MGR AND E.HIREDATE<M.HIREDATE;

EX:
waq to display employees whose salary is more than their manager salary?
SQL> SELECT E.ENAME EMPLOYEE,E.SAL EMP_SAL,
  2  M.ENAME MANAGER,M.SAL MGR_SAL FROM
  3  EMP E,EMP M WHERE M.EMPNO=E.MGR AND E.SAL>M.SAL;

Ex:
waq to display employees who are working under "BLAKE" manager?
SQL> SELECT E.ENAME EMPLOYEES FROM EMP E,EMP M
  2  WHERE M.EMPNO=E.MGR AND M.ENAME='BLAKE';

Ex:
waq to find out the manager of BLAKE employee?
SQL> SELECT M.ENAME MANAGER FROM EMP E,EMP M
  2  WHERE M.EMPNO=E.MGR AND E.ENAME='BLAKE';

MANAGER
----------
KING

HOW TO JOIN MORE THAN TWO TABLES:
=================================
SYNTAX FOR NON-ANSI JOINS:
==========================
SELECT * FROM <TN1>,<TN2>,<TN3>,........WHERE <JOIN COND1> AND <JOIN COND2> 
AND <JOIN COND3> AND ......;

EQUI JOIN:
==========
SQL> SELECT * FROM STUDENT;
SQL> SELECT * FROM COURSE;
SQL> SELECT * FROM REGISTER;

     REGNO REGDATE          CID
---------- --------- ----------
         1 08-AUG-22          1
         1 09-AUG-22          2
         3 10-AUG-22          5

SQL> SELECT * FROM STUDENT S,COURSE C,REGISTER R
  2  WHERE S.CID=C.CID AND C.CID=R.CID;

SYNTAX FOR ANSI JOINS:
======================
SELECT * FROM <TN1> <JOIN KEY> <TN2> ON <JOIN COND1>
<JOIN KEY> <TN3> ON <JOIN COND2>
<JOIN KEY> <TN4> ON <JOIN COND3>
..............................
..............................
<JOIN KEY> <TNn> ON <JOIN CONn-1>;

INNER JOIN:
===========
SQL> SELECT * FROM STUDENT S INNER JOIN COURSE C ON S.CID=C.CID
  2  INNER JOIN REGISTER R ON C.CID=R.CID;
==================================================================================








					





















);


































































					



















































































					
	